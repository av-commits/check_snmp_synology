#!/bin/bash
#################################################################
# Updated by Fabian Ihle, fabi@ihlecloud.de                     #
# Created: 07.12.2016 by Nicolas Ordonez, Switzerland           #
# Contributor: - Tobias Schenke                                 #
# github: https://github.com/n1tr0-5urf3r/check_snmp_synology   #
#                                                               #
#  -----------------------------------------------------------  #
# This plugin checks the health of your Synology NAS            #
# - System status (Power, Fans)                                 #
# - Disks status                                                #
# - RAID status                                                 #
# - DSM update status                                           #
# - Temperature Warning and Critical                            #
# - UPS information                                             #
# - Storage percentage of use                                   #
#                                                               #
#  -----------------------------------------------------------  #
#                                                               #
# Changelog:                                                    #
# 071216 Initial release by Nicolas Ordonez                     #
# 041719 Modified by Corben Eastman                             #
# 190121 Added SNMP v3 Authentication Protocols by Fabian Ihle  #
# 161222 Modified for DSM 7.0 by Fabian Ihle                    #
# 070523 Refactoring by AV:                                     #
#         - add support for check types (copy Corben Eastman)   #
#         - add support disk health status (dsm 7)              #
#         - reduce snmp gets/walks (performance)                #
#         - format cleanups: space, param validation            #
#         - switch volume usage info to raid OIDs (dsm 6)       #
#         - different disk snmp get paging                      #
#                                                               #
#################################################################

SNMPWALK=$(which snmpwalk)
SNMPGET=$(which snmpget)

SNMPVersion="3"
SNMPAuth="AuthPriv"
SNMPAuthProt="SHA"
SNMPPrivProt="AES"
SNMPV2Community="public"
SNMPTimeout="10"
warningTemperature="50"
criticalTemperature="60"
warningStorage="80"
criticalStorage="95"
hostname=""
healthWarningStatus=0
healthCriticalStatus=0
healthString=""
verboseString=""
verbose="no"
allowedTypes=(all system version temperature power fan disk raid ups)
checkType=all
all=(system version temperature power fan disk raid)
checks=()
noversion="no"
addups="no"

baseOIDs=(model serialNumber hostName)
systemOIDs=(systemStatus)
versionOIDs=(DSMVersion DSMUpgradeAvailable)
temperatureOIDs=(temperature)
powerOIDs=(powerStatus)
fanOIDs=(systemFanStatus CPUFanStatus)
diskOIDs=(diskName diskModel diskStatus diskTemp diskHealthStatus)
raidOIDs=(raidName raidStatus raidFreeSize raidTotalSize)
upsOIDs=(UpsModel UpsSN UpsStatus UpsLoad UpsBatteryCharge UpsBatteryChargeWarning)


#OID declarations
OID_syno="1.3.6.1.4.1.6574"

OID_model="1.3.6.1.4.1.6574.1.5.1.0"
OID_serialNumber="1.3.6.1.4.1.6574.1.5.2.0"
OID_hostName="1.3.6.1.2.1.1.5.0"

OID_systemStatus="1.3.6.1.4.1.6574.1.1.0"

OID_DSMVersion="1.3.6.1.4.1.6574.1.5.3.0"
OID_DSMUpgradeAvailable="1.3.6.1.4.1.6574.1.5.4.0"

OID_temperature="1.3.6.1.4.1.6574.1.2.0"
OID_powerStatus="1.3.6.1.4.1.6574.1.3.0"
OID_systemFanStatus="1.3.6.1.4.1.6574.1.4.1.0"
OID_CPUFanStatus="1.3.6.1.4.1.6574.1.4.2.0"

OID_diskID="1.3.6.1.4.1.6574.2.1.1.1"
OID_diskName="1.3.6.1.4.1.6574.2.1.1.2"
OID_diskModel="1.3.6.1.4.1.6574.2.1.1.3"
OID_diskStatus="1.3.6.1.4.1.6574.2.1.1.5"
OID_diskTemp="1.3.6.1.4.1.6574.2.1.1.6"
OID_diskHealthStatus="1.3.6.1.4.1.6574.2.1.1.13"

OID_raidID="1.3.6.1.4.1.6574.3.1.1.1"
OID_raidName="1.3.6.1.4.1.6574.3.1.1.2"
OID_raidStatus="1.3.6.1.4.1.6574.3.1.1.3"
OID_raidFreeSize="1.3.6.1.4.1.6574.3.1.1.4"
OID_raidTotalSize="1.3.6.1.4.1.6574.3.1.1.5"

OID_Storage="1.3.6.1.2.1.25.2.3.1"
OID_StorageDesc="1.3.6.1.2.1.25.2.3.1.3"
OID_StorageAllocationUnits="1.3.6.1.2.1.25.2.3.1.4"
OID_StorageSize="1.3.6.1.2.1.25.2.3.1.5"
OID_StorageSizeUsed="1.3.6.1.2.1.25.2.3.1.6"

OID_UpsModel="1.3.6.1.4.1.6574.4.1.1.0"
OID_UpsSN="1.3.6.1.4.1.6574.4.1.3.0"
OID_UpsStatus="1.3.6.1.4.1.6574.4.2.1.0"
OID_UpsLoad="1.3.6.1.4.1.6574.4.2.12.1.0"
OID_UpsBatteryCharge="1.3.6.1.4.1.6574.4.3.1.1.0"
OID_UpsBatteryChargeWarning="1.3.6.1.4.1.6574.4.3.1.4.0"

function usage() {
        echo "usage: ./check_snmp_synology [OPTIONS] -u [user] -p [pass] -h [hostname]"
        echo "options:"
        echo "            -u [snmp username]          Username for SNMPv3"
        echo "            -p [snmp password]          Password for SNMPv3"
        echo "            -l [level]                  Set security level (noAuthNoPriv|authNoPriv|authPriv) (default ${SNMPAuth})"
        echo "            -a [protocol]               Set authentication protocol (MD5|SHA) (default ${SNMPAuthProt})"
        echo "            -x [protocol]               Set privacy protocol (NONE|DES|AES) (default ${SNMPPrivProt})"
        echo ""
        echo "            -2 [community name]         Use SNMPv2 (no need user/password) & define community name (ex: public)"
        echo ""
        echo "            -h [hostname or IP](:port)  Hostname or IP. You can also define a different port"
        echo ""
        echo "            -W [warning temp]           Warning temperature (for disks & synology) (default $warningTemperature)"
        echo "            -C [critical temp]          Critical temperature (for disks & synology) (default $criticalTemperature)"
        echo ""
        echo "            -w [warning %]              Warning storage usage percentage (default $warningStorage)"
        echo "            -c [critical %]             Critical storage usage percentage (default $criticalStorage)"
        echo ""
        echo "            -t [check type]	          The type of check to perform, must be one or more of the following: ${allowedTypes[@]}, multiple check are delimited with comma (default $checkType)"
        echo "            -i                          Exclude 'version' from check type, if 'all' specified (default $noversion)"
        echo "            -U                          Include 'ups' to check type, if 'all' specified (default $addups)"
        echo "            -v                          Verbose - print all informations about your Synology"
        echo ""
        echo ""
        echo "examples:   ./check_snmp_synology -u admin -p 1234 -h nas.intranet"    
        echo "            ./check_snmp_synology -u admin -p 1234 -h nas.intranet -v"    
        echo "            ./check_snmp_synology -2 public -h nas.intranet -t temperature,power"    
        echo "            ./check_snmp_synology -2 public -h nas.intranet:10161"
        exit 3
}

function array_contains() # array value
{
    eval 'local values=("${'$1'[@]}")'

    local element
    for element in "${values[@]}"; do
        [[ "$element" == "$2" ]] && return 0
    done
    return 1
}


if [ "$1" == "--help" ]; then
    usage; exit 0
fi

while getopts l:a:x:2:W:C:w:c:u:p:h:t:iUv OPTNAME; do
    case "$OPTNAME" in
        u)    SNMPUser="$OPTARG";;
        p)    SNMPPassword="$OPTARG";;
        l)    SNMPAuth="$OPTARG";;
        a)    SNMPAuthProt="$OPTARG";;
        x)    SNMPPrivProt="$OPTARG";;
        h)    hostname="$OPTARG";;
        v)    verbose="yes";;
        2)    SNMPVersion="2"
              SNMPV2Community="$OPTARG";;
        w)    warningStorage="$OPTARG";;
        c)    criticalStorage="$OPTARG";;
        W)    warningTemperature="$OPTARG";;
        C)    criticalTemperature="$OPTARG";;
        t)    checkType="$OPTARG";;
        i)    noversion="yes";;
        U)    addups="yes";;
        *)    usage;;
    esac
done

IFS=',' read -r -a checkType <<< "$checkType"

for checkTypeElement in "${checkType[@]}"; do
    if ! array_contains allowedTypes "$checkTypeElement" ; then
        echo "$checkTypeElement is an invalid check type"
        echo ""
        echo "For more information:  ./${0##*/} --help"
        exit 1
    fi
done

# build checks array
for checkTypeElement in "${checkType[@]}"; do
    if [ "$checkTypeElement" == "all" ] ; then
         for allElement in "${all[@]}"; do
             if [ "$allElement" = "version" ] && [ "$noversion" = "yes" ] ; then
                 continue
             fi
             checks+=("$allElement")
         done
         if [ "$addups" != "no" ] ; then
             checks+=("ups")
         fi
    else
        checks+=("$checkTypeElement")
    fi
done

if [ "$warningTemperature" -gt "$criticalTemperature" ] ; then
    echo "Critical temperature must be higher than warning temperature"
    echo "Warning temperature: $warningTemperature"
    echo "Critical temperature: $criticalTemperature"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [ "$warningStorage" -gt "$criticalStorage" ] ; then
    echo "The Critical storage usage percentage  must be higher than the warning storage usage percentage"
    echo "Warning: $warningStorage"
    echo "Critical: $criticalStorage"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [[ ! "${allowedTypes[@]}" =~ "$checkType" ]] ; then
    echo "$checkType is an invalid check type"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [ "$hostname" = "" ] ; then
    echo "Missing hostname";
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [ "$SNMPVersion" = "3" ] && [ "$SNMPUser" = "" ] ; then
    echo "With SNMP version 3 SNMP user is required";
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [ "$SNMPVersion" = "3" ] && [ "$SNMPPassword" = "" ] ; then
    echo "With SNMP version 3 SNMP password is required";
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi

if [ "$SNMPVersion" = "3" ] && [ ${#SNMPPassword} -lt "8" ] ; then
    echo "snmpwalk:  (The supplied password is too short.)"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi


if [ "$SNMPVersion" = "2" ] ; then
    SNMPArgs=" -OQne -v 2c -c $SNMPV2Community -t $SNMPTimeout"
else
    SNMPArgs=" -OQne -v 3 -u $SNMPUser -A $SNMPPassword -x $SNMPPrivProt -X $SNMPPassword -l ${SNMPAuth} -a ${SNMPAuthProt} -t $SNMPTimeout"
fi

tmpRequest=$($SNMPGET $SNMPArgs $hostname $OID_model 2> /dev/null)
if [ "$?" != "0" ] ; then
    echo "Problem with SNMP request, check user/password/host"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi 

OIDsyno=""
for oid in "${baseOIDs[@]/#/OID_}"; do
    OIDsyno="$OIDsyno ${!oid}"
done
simpleDataChecks=(system version temperature power fan)
for checksElement in "${checks[@]}"; do
    if array_contains simpleDataChecks "$checksElement" ; then
        eval 'declare -n oidArray='$checksElement'OIDs'
        for oid in "${oidArray[@]/#/OID_}"; do
            OIDsyno="$OIDsyno ${!oid}"
        done
    fi
done
syno=$(echo "${diskInfo}"; $SNMPGET $SNMPArgs $hostname $OIDsyno)


model=$(echo "$syno" | grep $OID_model | cut -d "=" -f2 | sed 's/^[ \t"]*//;s/[ \t"]*$//')
serialNumber=$(echo "$syno" | grep $OID_serialNumber | cut -d "=" -f2 | sed 's/^[ \t"]*//;s/[ \t"]*$//')
hostName=$(echo "$syno" | grep $OID_hostName | cut -d "=" -f2 | sed 's/^[ \t"]*//;s/[ \t"]*$//')

healthString="Synology ($hostName)"

if [ "$verbose" = "yes" ] ; then  
    verboseString="${verboseString}Synology model:         $model\n"
    verboseString="${verboseString}Host name:              $hostName\n"
    verboseString="${verboseString}Serial Number:          $serialNumber\n"
fi

if array_contains checks "system" ; then
    systemStatus=$(echo "$syno" | grep $OID_systemStatus | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')

    if [ "$systemStatus" = "1" ] ; then
        systemStatus="Normal"
    else
        systemStatus="Failed"
        healthCriticalStatus=1
        healthString="$healthString, System status: $systemStatus "
    fi
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}System Status:          $systemStatus\n"
    fi
fi

if array_contains checks "version" ; then
    DSMVersion=$(echo "$syno" | grep $OID_DSMVersion | cut -d "=" -f2 | sed 's/^[ \t"]*//;s/[ \t"]*$//')
    DSMUpgradeAvailable=$(echo "$syno" | grep $OID_DSMUpgradeAvailable | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
    case $DSMUpgradeAvailable in
        "1")	DSMUpgradeAvailable="Available";	healthWarningStatus=1;		healthString="$healthString, DSM update available" ;;
        "2")	DSMUpgradeAvailable="Unavailable";;
        "3")	DSMUpgradeAvailable="Connecting";;
        "4")	DSMUpgradeAvailable="Disconnected"; healthWarningStatus=1;		healthString="$healthString, DSM Update Disconnected" ;;
        "5")	DSMUpgradeAvailable="Others";		healthWarningStatus=1;		healthString="$healthString, Check DSM Update" ;;
    esac
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}DSM Version:            $DSMVersion\n"
        verboseString="${verboseString}DSM update:             $DSMUpgradeAvailable\n"
    fi
fi

if array_contains checks "temperature" ; then
    temperature=$(echo "$syno" | grep $OID_temperature | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
    if [[ $temperature =~ '^[0-9]+$' ]] ; then
        if [ "$temperature" -gt "$warningTemperature" ] ; then
            if [ "$temperature" -gt "$criticalTemperature" ] ; then
                    temperature="${temperature}°C (CRITICAL)"
                    healthCriticalStatus=1
                    healthString="$healthString, temperature: $temperature "
            else
                    temperature="${temperature}°C (WARNING)"
                    healthWarningStatus=1
                    healthString="$healthString, temperature: $temperature "
            fi
        else
            temperature="${temperature}°C (Normal)"
        fi
    else
        temperature="N/A"
    fi
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}Temperature:            $temperature\n"
    fi
fi

if array_contains checks "power" ; then
    powerStatus=$(echo "$syno" | grep $OID_powerStatus | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')

    if [ "$powerStatus" = "1" ] ; then
        powerStatus="Normal"
    else
        powerStatus="Failed";
        healthCriticalStatus=1
        healthString="$healthString, Power status: $powerStatus "
    fi
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}Power Status:           $powerStatus\n"
    fi
fi

if array_contains checks "fan" ; then
    systemFanStatus=$(echo "$syno" | grep $OID_systemFanStatus | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
    CPUFanStatus=$(echo "$syno" | grep $OID_CPUFanStatus | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')

    if [ "$systemFanStatus" = "1" ] ; then
        systemFanStatus="Normal"
    else
        systemFanStatus="Failed";
        healthCriticalStatus=1
        healthString="$healthString, System fan status: $systemFanStatus "
    fi

    if [ "$CPUFanStatus" = "1" ] ; then
        CPUFanStatus="Normal"
    else
        CPUFanStatus="Failed";
        healthCriticalStatus=1
        healthString="$healthString, CPU fan status: $CPUFanStatus "
    fi
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}System Fan Status:      $systemFanStatus\n"
        verboseString="${verboseString}CPU Fan Status:         $CPUFanStatus\n"
    fi
fi

if array_contains checks "disk" ; then
    nbDisk=$($SNMPWALK $SNMPArgs $hostname $OID_diskID | wc -l)
    OIDdisks=""
    pagesize=12
    diskinfo=""
    
    for i in $(seq 0 $(($nbDisk-1))); do
        for diskOID in "${diskOIDs[@]/#/OID_}"; do
            OIDdisks="$OIDdisks ${!diskOID}.$i"
        done
        
        if [ $(expr $i % $pagesize) -eq $(($pagesize-1)) ] ; then
            diskInfo=$(echo "${diskInfo}"; $SNMPGET $SNMPArgs $hostname $OIDdisks)
            OIDdisks=""
        fi
    done
    diskInfo=$(echo "${diskInfo}"; $SNMPGET $SNMPArgs $hostname $OIDdisks)
    
          
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}Number of disks:        $nbDisk\n"
    fi
    
    for i in $(seq 0 $(($nbDisk-1))); do
        diskName[$i]=$(echo "$diskInfo" | grep "$OID_diskName.$i " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        diskModel[$i]=$(echo "$diskInfo" | grep "$OID_diskModel.$i " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        diskStatus[$i]=$(echo "$diskInfo" | grep "$OID_diskStatus.$i " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        diskTemp[$i]=$(echo "$diskInfo" | grep "$OID_diskTemp.$i " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        diskHealthStatus[$i]=$(echo "$diskInfo" | grep "$OID_diskHealthStatus.$i " | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')

        case ${diskStatus[$i]} in
                "1")    diskStatus[$i]="Normal";                ;;
                "2")    diskStatus[$i]="Initialized";           ;;
                "3")    diskStatus[$i]="NotInitialized";        ;;
                "4")    diskStatus[$i]="SystemPartitionFailed"; healthCriticalStatus=1; healthString="$healthString, problem with ${diskName[$i]} (model:${diskModel[$i]}) status:${diskStatus[$i]} temperature:${diskTemp[$i]}";;
                "5")    diskStatus[$i]="Crashed";               healthCriticalStatus=1; healthString="$healthString, problem with ${diskName[$i]} (model:${diskModel[$i]}) status:${diskStatus[$i]} temperature:${diskTemp[$i]}";;
        esac

        case ${diskHealthStatus[$i]} in
                "1")    diskHealthStatus[$i]="Normal";    ;;
                "2")    diskHealthStatus[$i]="Warning";   healthCriticalStatus=1; healthString="$healthString, problem with ${diskName[$i]} (model:${diskModel[$i]}) health:${diskHealthStatus[$i]} temperature:${diskTemp[$i]}";;
                "3")    diskHealthStatus[$i]="Critical";  healthCriticalStatus=1; healthString="$healthString, problem with ${diskName[$i]} (model:${diskModel[$i]}) health:${diskHealthStatus[$i]} temperature:${diskTemp[$i]}";;
                "4")    diskHealthStatus[$i]="Failing";   healthCriticalStatus=1; healthString="$healthString, problem with ${diskName[$i]} (model:${diskModel[$i]}) health:${diskHealthStatus[$i]} temperature:${diskTemp[$i]}";;
                *)      diskHealthStatus[$i]="N/A";       ;;
        esac

        if [ "${diskTemp[$i]}" -gt "$warningTemperature" ] ; then
            if [ "${diskTemp[$i]}" -gt "$criticalTemperature" ] ; then
                diskTemp[$i]="${diskTemp[$i]} (CRITICAL)"
                healthCriticalStatus=1;
                healthString="$healthString, ${diskName[$i]} temperature: ${diskTemp[$i]}"
            else
                diskTemp[$i]="${diskTemp[$i]} (WARNING)"
                healthWarningStatus=1;
                healthString="$healthString, ${diskName[$i]} temperature: ${diskTemp[$i]}"
            fi
        fi
  
        
        if [ "$verbose" = "yes" ] ; then  
            verboseString="${verboseString}    ${diskName[$i]} (model:${diskModel[$i]}) status:${diskStatus[$i]} health:${diskHealthStatus[$i]} temperature:${diskTemp[$i]}\n"
        fi
       
    done
fi

if array_contains checks "raid" ; then
    nbRaid=$($SNMPWALK $SNMPArgs $hostname $OID_raidID | wc -l)
    OIDraids=""
    
    for i in $(seq 0 $(($nbRaid-1))); do
        for raidOID in "${raidOIDs[@]/#/OID_}"; do
            OIDraids="$OIDraids ${!raidOID}.$i"
        done
    done
    raidinfo=$($SNMPGET $SNMPArgs $hostname $OIDraids)
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}Number of RAID volume:  $nbRaid\n"
    fi
    
    for i in $(seq 0 $(($nbRaid-1))); do
        raidName[$i]=$(echo "$raidinfo" | grep $OID_raidName.$i | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        raidStatus[$i]=$(echo "$raidinfo" | grep $OID_raidStatus.$i | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        raidFreeSize[$i]=$(echo "$raidinfo" | grep $OID_raidFreeSize.$i | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        raidTotalSize[$i]=$(echo "$raidinfo" | grep $OID_raidTotalSize.$i | cut -d "=" -f2 | sed 's/^[ \t]*//;s/[ \t]*$//')
        raidUsedSize[$i]=$((${raidTotalSize[$i]} - ${raidFreeSize[$i]}))
        raidPercentUsed[$i]=$((${raidUsedSize[$i]} * 100 / ${raidTotalSize[$i]}))
        raidPercentUsedString[$i]="${raidPercentUsed[$i]}% used"
        
        case ${raidStatus[$i]} in
            "1")    raidStatus[$i]="Normal";        ;;
            "2")    raidStatus[$i]="Repairing";           healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "3")    raidStatus[$i]="Migrating";           healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "4")    raidStatus[$i]="Expanding";           healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "5")    raidStatus[$i]="Deleting";            healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "6")    raidStatus[$i]="Creating";            healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "7")    raidStatus[$i]="RaidSyncing";         healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "8")    raidStatus[$i]="RaidParityChecking";  healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "9")    raidStatus[$i]="RaidAssembling";      healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "10")   raidStatus[$i]="Canceling";           healthWarningStatus=1;        healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "11")   raidStatus[$i]="Degrade";             healthCriticalStatus=1;       healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
            "12")   raidStatus[$i]="Crashed";             healthCriticalStatus=1;       healthString="$healthString, RAID status (${raidName[$i]}): ${raidStatus[$i]} ";;
        esac

        # check usage only for volumes 
        if [[ ${raidName[$i]} == Volume* ]] && [[ "${raidPercentUsed[$i]}" -gt "$warningStorage" ]] ; then
            if [ "${raidPercentUsed[$i]}" -gt "$criticalStorage" ] ; then
                healthCriticalStatus=1;
                raidPercentUsedString[$i]="${raidPercentUsedString[$i]} (CRITICAL)"
                healthString="$healthString, ${raidName[$i]}: ${raidPercentUsedString[$i]}"
            else
                healthWarningStatus=1;
                raidPercentUsedString[$i]="${raidPercentUsedString[$i]} (WARNING)"
                healthString="$healthString, ${raidName[$i]}: ${raidPercentUsedString[$i]}"
            fi
        fi
        
        if [ "$verbose" = "yes" ] ; then  
            verboseString="${verboseString}    ${raidName[$i]} status:${raidStatus[$i]} ${raidPercentUsedString[$i]}\n"
        fi
    done
fi

if array_contains checks "ups" ; then
    OIDups=""

    for upsOID in "${upsOIDs[@]/#/OID_}"; do
        OIDups="$OIDups ${!upsOID}"
    done

    upsinfo=$($SNMPGET $SNMPArgs $hostname $OIDups)
    
    upsModel=$(echo "$upsinfo" | grep $OID_UpsModel | cut -d "=" -f2)
    upsSN=$(echo "$upsinfo" | grep $OID_UpsSN | cut -d "=" -f2)
    upsStatus=$(echo "$upsinfo" | grep $OID_UpsStatus | cut -d "=" -f2)
    upsLoad=$(echo "$upsinfo" | grep $OID_UpsLoad | cut -d "=" -f2)
    upsBatteryCharge=$(echo "$upsinfo" | grep $OID_UpsBatteryCharge | cut -d "=" -f2)
    upsBatteryChargeWarning=$(echo "$upsinfo" | grep $OID_UpsBatteryChargeWarning | cut -d "=" -f2)
    
    if [ "$verbose" = "yes" ] ; then
        verboseString="${verboseString}UPS:\n"
        verboseString="${verboseString}    Model:                  $upsModel\n"
        verboseString="${verboseString}    s/n:                    $upsSN\n"
        verboseString="${verboseString}    Status:                 $upsStatus\n"
        verboseString="${verboseString}    Load:                   $upsLoad\n"
        verboseString="${verboseString}    Battery charge:         $upsBatteryCharge\n"
        verboseString="${verboseString}    Battery charge warning: $upsBatteryChargeWarning\n"
    fi
fi

resultCode=3
if [ "$healthCriticalStatus" = "1" ] ; then
    echo "❌ CRITICAL - $healthString"
    resultCode=2
elif [ "$healthWarningStatus" = "1" ] ; then
    echo "⚠️ WARNING - $healthString"
    resultCode=1
elif [ "$healthCriticalStatus" = "0" ] && [ "$healthWarningStatus" = "0" ] ; then
    echo "✅ OK - $healthString is in good health"
    resultCode=0
fi

if [ "$verbose" = "yes" ] ; then
    echo -e "$verboseString"
fi

exit $resultCode
